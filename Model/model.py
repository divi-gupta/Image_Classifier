
i = Input(shape = x_train[0].shape)
x = Conv2D(32, (3,3), padding = "same", activation = "relu")(i)
x = BatchNormalization()(x)
x = Conv2D(32, (3,3), padding = "same", activation =  "relu")(x)
x = BatchNormalization()(x)
x = MaxPooling2D((2,2))(x)
x = Conv2D(64, (3,3), padding = "same", activation = "relu")(x)
x = BatchNormalization()(x)
x = Conv2D(64, (3,3), padding = "same", activation = "relu")(x)
x = BatchNormalization()(x) 
x = Conv2D(64, (3,3), padding = "same", activation = "relu")(x)
x = BatchNormalization()(x)
x = MaxPooling2D((2,2))(x)
x = Conv2D(128, (3,3), padding = "same", activation = "relu")(x)
x = BatchNormalization()(x)
x = Conv2D(128, (3,3), padding = "same", activation = "relu")(x)
x = BatchNormalization()(x)
x = MaxPooling2D((2,2))(x)
x = GlobalMaxPooling2D()(x)
x = Flatten()(x)
x = Dropout(0.2)(x)
x = Dense(1024, activation = "relu")(x)
x = Dropout(0.2)(x)
x = Dense(k, activation = "softmax")(x)
model = Model(i,x)

model.compile(optimizer="adam",loss="sparse_categorical_crossentropy",metrics=["accuracy"])